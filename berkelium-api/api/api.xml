<?xml version="1.0" encoding="UTF-8"?>
<api>
	<mapping type="c" prefix="BK_">
		<type name="int32" value="bk_int32" impl="int32_t"/>
		<type name="bool" value="bk_bool" impl="int32_t"/>
		<type name="string" value="bk_string" impl="char*"/>
		<type name="Rect" value="BK_Rect" impl="void*"/>
		<type name="WindowList" value="BK_WindowList*" list="Window"/>
		<type name="TabList" value="BK_TabList*" list="Tab"/>
	</mapping>
	<mapping type="cpp" class-postfix="Ref">
		<type name="int32" value="int32_t"/>
		<type name="bool" value="bool"/>
		<type name="string" value="const std::string&amp;" ret="const std::string"/>
		<type name="Rect" value="RectRef"/>
		<type name="WindowList" value="WindowListRef"/>
		<type name="TabList" value="TabListRef"/>
	</mapping>
	<mapping type="java">
		<type name="int32" value="int"/>
		<type name="bool" value="boolean"/>
		<type name="string" value="String"/>
		<type name="Rect" value="Rect" import="org.berkelium.api."/>
		<type name="WindowList" value="java.util.List&lt;Window&gt;"/>
		<type name="TabList" value="java.util.List&lt;Tab&gt;"/>
		<type name="Throwable" value="Throwable"/>
	</mapping>
	<mapping type="java-signature" prefix="Lorg/berkelium/api/" postfix=";">
		<type name="Rect" value="Lorg/berkelium/api/Rect;"/>
		<type name="string" value="Ljava/lang/String;"/>
	</mapping>
	<mapping type="jni" class="jobject">
		<type name="string" value="jstring"/>
		<type name="int32" value="jint"/>
		<type name="bool" value="jboolean"/>
		<type name="WindowList" value="jobject"/>
		<type name="TabList" value="jobject"/>
		<type name="Throwable" value="jthrowable"/>
	</mapping>
	<group type="interface" name="HostVersion">
		<entry name="getRuntime" ret="Runtime">
			<short>Returns the associated Runtime.</short>
		</entry>
		<entry name="getVersionString" ret="string">
			<short>Returns the berkelium host version e.g. "22.0.1229.94"</short>
		</entry>
		<entry name="getMajor" ret="int32">
			<short>Returns the Major Version, e.g. "22"</short>
		</entry>
		<entry name="getMinor" ret="int32">
			<short>Returns the Minor Version, always zero?</short>
		</entry>
		<entry name="getBuild" ret="int32">
			<short>Returns the Build Version, e.g. "1229"</short>
		</entry>
		<entry name="getPatch" ret="int32">
			<short>Returns the Patch Version, e.g. "94"</short>
		</entry>
		<entry name="isMinVersion" ret="bool">
			<arg type="string" name="version"/>
			<short>Returns true if the given Version is less or equal to the version of the executable represented by this executable object.</short>
		</entry>
	</group>
	<group type="class" name="BerkeliumFactory">
		<implementation type="java"><![CDATA[	public static BerkeliumFactory getInstance() {
		return BerkeliumFactoryLoader.getBerkeliumFactoryInstance();
	}
]]></implementation>
		<entry static="true" name="getDefaultRuntime" ret="Runtime">
			<short>Returns the default Berkelium Runtime Instance.</short>
		</entry>
		<entry static="true" name="createRuntime" ret="Runtime">
			<short>Creates an add additional Berkelium Runtime Instance with default LogDelegate.</short>
		</entry>
		<entry static="true" name="createRuntimeWithLog" ret="Runtime">
			<arg type="LogDelegate" name="log"/>
			<short>Creates an add additional Berkelium Runtime Instance with given LogDelegate.</short>
		</entry>
	</group>
	<group type="interface" name="Runtime">
		<entry name="getDebugObjectStats" ret="string">
			<short>String with object count debug informations.</short>
		</entry>
		<entry name="update">
			<arg type="int32" name="timeout"/>
			<short>Processes all Pending Events. Waits up to timeout ms for new events.</short>
		</entry>
		<entry name="addUpdateEvent">
			<arg type="Update" name="update"/>
			<arg type="int32" name="timeout"/>
			<short>Calls given update method after given timeout (in ms).</short>
		</entry>
		<entry name="removeUpdateEvent">
			<arg type="Update" name="update"/>
			<short>Removes given update method from update task list.</short>
		</entry>
		<entry name="setDefaultExecutable">
			<arg type="string" name="pathTo"/>
			<short>Sets the Path to the HostExecutable Object used by forSystemInstalled.</short>
		</entry>
		<entry name="forExecutable" ret="HostExecutable">
			<arg type="string" name="pathTo"/>
			<short>Creates an HostExecutable Object representing the given executable.</short>
		</entry>
		<entry name="forSystemInstalled" ret="HostExecutable">
			<short>Creates an HostExecutable, the exectuable is searched through system path or system configuration (e.g. registry on windows)</short>
			<todo>Maybe a version number should be given here</todo>
		</entry>
		<entry name="forProfile" ret="Profile">
			<arg type="string" name="application"/>
			<short>Returns the profile for the given application name.</short>
		</entry>
		<entry name="getChromeProfile" ret="Profile">
			<short>Returns a Profile object representing the Google Chrome profile.</short>
		</entry>
		<entry name="getChromiumProfile" ret="Profile">
			<short>Returns a Profile object representing the Chromium profile.</short>
		</entry>
		<entry name="forProfilePath" ret="Profile">
			<arg type="string" name="path"/>
			<short>Returns the profile located inside the given path.</short>
		</entry>
		<entry name="createTemporaryProfile" ret="Profile">
			<short>Creates a temporary profile that gets automatically removed after use.</short>
		</entry>
		<entry name="forVersion" ret="HostVersion" c-suffix="S" jni-suffix="__Ljava_lang_String_2">
			<arg type="string" name="version"/>
			<short>Creates a HostVersion object representing the given version string.</short>
		</entry>
		<entry name="forVersion" ret="HostVersion" c-suffix="4I" jni-suffix="__IIII">
			<arg type="int32" name="vMajor"/>
			<arg type="int32" name="vMinor"/>
			<arg type="int32" name="vBuild"/>
			<arg type="int32" name="vPatch"/>
			<short>Creates a HostVersion object representing the given version number.</short>
		</entry>
		<entry name="open" ret="Instance">
			<arg type="HostExecutable" name="executable"/>
			<arg type="Profile" name="profile"/>
			<short>Launches a the given berkelium host process using the given profile.</short>
		</entry>
		<entry name="getLogger" ret="Logger">
			<arg type="string" name="clazz"/>
			<arg type="string" name="name"/>
		</entry>
		<entry name="addLogDelegate">
			<arg type="LogDelegate" name="delegate"/>
			<short>Add the given LogDelegate to this Instance.</short>
		</entry>
		<entry name="removeLogDelegate">
			<arg type="LogDelegate" name="delegate"/>
			<short>Remove the given LogDelegate from this Instance.</short>
		</entry>
		<entry name="log">
			<arg type="LogSource" name="source"/>
			<arg type="LogType" name="type"/>
			<arg type="string" name="clazz"/>
			<arg type="string" name="name"/>
			<arg type="string" name="message"/>
			<short>Forwards the given type/message to all log handlers attached to this instance.</short>
		</entry>
		<entry name="handleThrowable" type="java">
			<arg type="Throwable" name="t"/>
			<short>Error handler used by this instance.</short>
		</entry>
	</group>
	<group type="interface" name="HostExecutable">
		<short>Represents a reference to the executable file of the berkelium host process.</short>
		<entry name="getRuntime" ret="Runtime">
			<short>Returns the associated Runtime.</short>
		</entry>
		<entry name="getPath" ret="string">
			<short>Returns the full (native) path to the berkelium host executable represented by this object.</short>
		</entry>
		<entry name="getVersion" ret="HostVersion">
			<short>Returns the version of this berkelium host executable.</short>
		</entry>
	</group>
	<group type="interface" name="Profile">
		<short>Represents a berkelium profile on disk.</short>
		<entry name="getRuntime" ret="Runtime">
			<short>Returns the associated Runtime.</short>
		</entry>
		<entry name="isInUse" ret="bool">
			<short>Returns true if this profile is already in use.</short>
		</entry>
		<entry name="isFound" ret="bool">
			<short>Returns true if this profile was found on disk.</short>
		</entry>
		<entry name="isSameVersion" ret="bool">
			<short>Returns true if this profile can be used without updating this profile to a newer version.</short>
		</entry>
		<entry name="isTooNew" ret="bool">
			<short>Returns true if this profile is from a newer berkelium host version.</short>
		</entry>
		<entry name="getApplicationName" ret="string">
			<short>Returns the name of the application or "berkelium" if not specified.</short>
		</entry>
		<entry name="getProfilePath" ret="string">
			<short>Returns the full path to the used Profile.</short>
		</entry>
		<entry name="setLocked">
			<arg type="bool" name="locked"/>
			<short>Lock or Unlock the Profile so another instance can't open it for writing.</short>
		</entry>
		<entry name="isLocked" ret="bool">
			<short>Returns true if this Profile instance holds the Profile lock.</short>
		</entry>
	</group>
	<group type="enum" name="LogSource">
		<entry name="Host"/>
		<entry name="Lib"/>
	</group>
	<group type="enum" name="LogType">
		<entry name="StdOut">
			<short>Represents the stdout stream.</short>
		</entry>
		<entry name="StdErr">
			<short>Represents the stderr stream.</short>
		</entry>
		<entry name="Debug">
			<short>Represents debug messages.</short>
		</entry>
		<entry name="Info">
			<short>Represents info messages.</short>
		</entry>
		<entry name="Warn">
			<short>Represents warn messages.</short>
		</entry>
		<entry name="Error">
			<short>Represents error messages.</short>
		</entry>
	</group>
	<group type="interface" name="Logger">
		<implementation type="cpp"><![CDATA[public:
	virtual std::ostream& debug() = 0;
	virtual std::ostream& info() = 0;
	virtual std::ostream& warn() = 0;
	virtual std::ostream& error() = 0;

	virtual void systemError(const std::string& error) = 0;
	virtual void systemError(const std::string& error, const std::string& arg) = 0;]]>
</implementation>
		<entry name="debug">
			<arg type="string" name="message"/>
		</entry>
		<entry name="info">
			<arg type="string" name="message"/>
		</entry>
		<entry name="warn">
			<arg type="string" name="message"/>
		</entry>
		<entry name="error">
			<arg type="string" name="message"/>
		</entry>
	</group>
	<group type="interface" name="LogDelegate" delegate="true">
		<entry name="log">
			<arg type="Runtime" name="runtime"/>
			<arg type="LogSource" name="source"/>
			<arg type="LogType" name="type"/>
			<arg type="string" name="clazz"/>
			<arg type="string" name="name"/>
			<arg type="string" name="message"/>
			<short>Allows the client application to handle berkelium library and host messages.</short>
		</entry>
	</group>
	<group type="interface" name="HostDelegate" delegate="true">
		<short>Handler for events concerning the berkelium host process.</short>
		<short>HostAdapter is an abstract class with empty function definitions for all functions in HostDelegate.</short>
		<entry name="onCrashed">
			<arg type="Instance" name="instance"/>
			<short>Called if the host process was unexpected terminated.</short>
		</entry>
		<entry name="onClosed">
			<arg type="Instance" name="instance"/>
			<short>Called if the host process was properly closed.</short>
		</entry>
		<entry name="onPing">
			<arg type="Instance" name="instance"/>
			<short>Called when a ping was recv from the host.</short>
		</entry>
	</group>
	<group type="interface" name="Instance">
		<short>Represents a running berkelium host instance.</short>
		<entry name="getRuntime" ret="Runtime">
			<short>Returns the associated Runtime.</short>
		</entry>
		<entry name="close">
			<short>Closes all open Windows/Tabs and the profile, terminates the host.</short>
			<short>Also removes the profile if it is a temporary one.</short>
		</entry>
		<entry name="getProfile" ret="Profile">
			<short>Returns the profile used to launch this instance.</short>
		</entry>
		<entry name="getExecutable" ret="HostExecutable">
			<short>Returns the executable used to launch this instance.</short>
		</entry>
		<entry name="addHostDelegate">
			<arg type="HostDelegate" name="delegate"/>
			<short>Add the given HostDelegate to this Instance.</short>
		</entry>
		<entry name="removeHostDelegate">
			<arg type="HostDelegate" name="delegate"/>
			<short>Remove the given HostDelegate from this Instance.</short>
		</entry>
		<entry name="getWindowCount" ret="int32">
			<short>Returns the number of active Windows.</short>
		</entry>
		<entry name="getWindowList" ret="WindowList">
			<short>Returns a list of all active windows.</short>
			<short>It is guaranteed that there is at least one window. If the last window is closed the host process will be closed.</short>
		</entry>
		<entry name="createWindow" ret="Window">
			<arg type="bool" name="incognito"/>
			<short>Open a new window.</short>
		</entry>
	</group>
	<group type="interface" name="Window">
		<entry name="getRuntime" ret="Runtime">
			<short>Returns the associated Runtime.</short>
		</entry>
		<entry name="getTabCount" ret="int32">
			<short>Returns the current tab count.</short>
		</entry>
		<entry name="getTabList" ret="TabList">
			<short>Returns an ordered list of all tabs in this window.</short>
		</entry>
		<entry name="createTab" ret="Tab">
			<short>Creates a new (about:blank) Tab.</short>
		</entry>
		<entry name="getInstance" ret="Instance">
			<short>Returns the Instance used to create this Window.</short>
		</entry>
		<entry name="moveTo">
			<arg type="Tab" name="tab"/>
			<arg type="int32" name="index"/>
			<short>Move this Tab to the given index.</short>
		</entry>
		<entry name="isIncognito" ret="bool">
			<short>Returns true if this is a incognito window.</short>
		</entry>
	</group>
	<group type="interface" name="WindowDelegate" delegate="true">
	</group>
	<group type="interface" name="Tab">
		<entry name="getRuntime" ret="Runtime">
			<short>Returns the associated Runtime.</short>
		</entry>
		<entry name="close">
			<short>Closes this tab and removes it from the window.</short>
		</entry>
		<entry name="sync">
			<short>Wait until all pending Java Script Events are handled.</short>
		</entry>
		<entry name="addTabDelegate">
			<arg type="TabDelegate" name="delegate"/>
			<short>Add a TabDelegate to this tab.</short>
		</entry>
		<entry name="removeTabDelegate">
			<arg type="TabDelegate" name="delegate"/>
			<short>Remove a TabDelegate from this tab.</short>
		</entry>
		<entry name="getWindow" ret="Window">
			<short>Returns the Window of this Tab.</short>
		</entry>
		<entry name="resize">
			<arg type="int32" name="width"/>
			<arg type="int32" name="height"/>
			<short>Set the size of this tab.</short>
			<short>A onResize() event is triggered on the tab delegate.</short>
		</entry>
		<entry name="navigateTo">
			<arg type="string" name="url"/>
			<short>Set the URL of this tab. A new tab has the url "about:blank".</short>
			<short>This function should be called after all event listeners are registered.</short>
		</entry>
	</group>
	<group type="interface" name="TabDelegate" delegate="true">
		<short>Handler for events concerning tab content.</short>
		<short>TabAdapter is an abstract class with empty function definitions for all functions in TabDelegate.</short>
		<entry name="onClosed">
			<arg type="Tab" name="tab"/>
		</entry>
		<entry name="onTitleChanged">
			<arg type="Tab" name="tab"/>
			<arg type="string" name="title"/>
		</entry>
		<entry name="onPaint">
			<arg type="Tab" name="tab"/>
		</entry>
		<entry name="onPaintDone">
			<arg type="Tab" name="tab"/>
			<arg type="Rect" name="rect"/>
		</entry>
		<entry name="onReady">
			<arg type="Tab" name="tab"/>
		</entry>
	</group>
	<group type="interface" name="Update" delegate="true">
		<entry name="update"/>
	</group>
</api>

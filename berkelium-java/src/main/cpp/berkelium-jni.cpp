// Copyright (c) 2013 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

#include "org_berkelium_impl_HostVersionImpl.h"
#include "org_berkelium_impl_BerkeliumFactoryImpl.h"
#include "org_berkelium_impl_RuntimeImpl.h"
#include "org_berkelium_impl_HostExecutableImpl.h"
#include "org_berkelium_impl_ProfileImpl.h"
#include "org_berkelium_impl_LoggerImpl.h"
#include "org_berkelium_impl_InstanceImpl.h"
#include "org_berkelium_impl_WindowImpl.h"
#include "org_berkelium_impl_TabImpl.h"

#define JavaID_LogSource "org/berkelium/api/LogSource"
jclass LogSource_class;
#define JavaID_LogSource_ordinal "()I"
jmethodID LogSource_ordinal_Java;

#define JavaID_LogType "org/berkelium/api/LogType"
jclass LogType_class;
#define JavaID_LogType_ordinal "()I"
jmethodID LogType_ordinal_Java;

#define JavaID_LogDelegate "org/berkelium/api/LogDelegate"
jclass LogDelegate_class;
#define JavaID_LogDelegate_log "(Lorg/berkelium/api/Runtime;Lorg/berkelium/api/LogSource;Lorg/berkelium/api/LogType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"
jmethodID LogDelegate_log_Java;

#define JavaID_HostDelegate "org/berkelium/api/HostDelegate"
jclass HostDelegate_class;
#define JavaID_HostDelegate_onCrashed "(Lorg/berkelium/api/Instance;)V"
jmethodID HostDelegate_onCrashed_Java;
#define JavaID_HostDelegate_onClosed "(Lorg/berkelium/api/Instance;)V"
jmethodID HostDelegate_onClosed_Java;
#define JavaID_HostDelegate_onPing "(Lorg/berkelium/api/Instance;)V"
jmethodID HostDelegate_onPing_Java;

#define JavaID_WindowDelegate "org/berkelium/api/WindowDelegate"
jclass WindowDelegate_class;

#define JavaID_TabDelegate "org/berkelium/api/TabDelegate"
jclass TabDelegate_class;
#define JavaID_TabDelegate_onClosed "(Lorg/berkelium/api/Tab;)V"
jmethodID TabDelegate_onClosed_Java;
#define JavaID_TabDelegate_onTitleChanged "(Lorg/berkelium/api/Tab;Ljava/lang/String;)V"
jmethodID TabDelegate_onTitleChanged_Java;
#define JavaID_TabDelegate_onPaint "(Lorg/berkelium/api/Tab;)V"
jmethodID TabDelegate_onPaint_Java;
#define JavaID_TabDelegate_onPaintDone "(Lorg/berkelium/api/Tab;Lorg/berkelium/api/Rect;)V"
jmethodID TabDelegate_onPaintDone_Java;
#define JavaID_TabDelegate_onReady "(Lorg/berkelium/api/Tab;)V"
jmethodID TabDelegate_onReady_Java;

#define JavaID_Update "org/berkelium/api/Update"
jclass Update_class;
#define JavaID_Update_update "()V"
jmethodID Update_update_Java;

inline jint Berkelium_Java_Internal_Load(JNIEnv* env);

#include "org_berkelium_impl_BerkeliumJavaImpl.h"

#include "berkelium-jni.hpp"

jint Berkelium_Java_Internal_Load(JNIEnv* env)
{
	jclass c;
	jmethodID m;

	BERKELIUM_FIND_CLASS(LogSource);
	BERKELIUM_GET_METHODID(LogSource, ordinal);

	BERKELIUM_FIND_CLASS(LogType);
	BERKELIUM_GET_METHODID(LogType, ordinal);

	BERKELIUM_FIND_CLASS(LogDelegate);
	BERKELIUM_GET_METHODID(LogDelegate, log);

	BERKELIUM_FIND_CLASS(HostDelegate);
	BERKELIUM_GET_METHODID(HostDelegate, onCrashed);
	BERKELIUM_GET_METHODID(HostDelegate, onClosed);
	BERKELIUM_GET_METHODID(HostDelegate, onPing);

	BERKELIUM_FIND_CLASS(WindowDelegate);

	BERKELIUM_FIND_CLASS(TabDelegate);
	BERKELIUM_GET_METHODID(TabDelegate, onClosed);
	BERKELIUM_GET_METHODID(TabDelegate, onTitleChanged);
	BERKELIUM_GET_METHODID(TabDelegate, onPaint);
	BERKELIUM_GET_METHODID(TabDelegate, onPaintDone);
	BERKELIUM_GET_METHODID(TabDelegate, onReady);

	BERKELIUM_FIND_CLASS(Update);
	BERKELIUM_GET_METHODID(Update, update);

	return 0;
}

const char* BK_Java_Class_Names[] = {
      "org/berkelium/impl/HostVersionImpl",
      "org/berkelium/impl/BerkeliumFactoryImpl",
      "org/berkelium/impl/RuntimeImpl",
      "org/berkelium/impl/HostExecutableImpl",
      "org/berkelium/impl/ProfileImpl",
      "org/berkelium/impl/LoggerImpl",
	NULL,
	NULL,
      "org/berkelium/impl/InstanceImpl",
      "org/berkelium/impl/WindowImpl",
	NULL,
      "org/berkelium/impl/TabImpl",
	NULL,
	NULL,
};

// =========================================
//
//	BerkeliumFactory
//
// =========================================

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_BerkeliumFactoryImpl_createRuntime(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_BerkeliumFactory_createRuntime(&bkenv));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_BerkeliumFactoryImpl_createRuntimeWithLog(JNIEnv* env, jobject _this, jobject log)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_BerkeliumFactory_createRuntimeWithLog(&bkenv, (BK_LogDelegate)log));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_BerkeliumFactoryImpl_getDefaultRuntime(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_BerkeliumFactory_getDefaultRuntime(&bkenv));
}

// =========================================
//
//	HostExecutable
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_HostExecutableImpl_dispose(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_HostExecutable_free(&bkenv, (void*)_this);
}


JNIEXPORT jstring JNICALL Java_org_berkelium_impl_HostExecutableImpl_getPath(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JSTRING(env, BK_HostExecutable_getPath(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_HostExecutableImpl_getRuntime(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_HostExecutable_getRuntime(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_HostExecutableImpl_getVersion(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_HostExecutable_getVersion(&bkenv, (void*)_this));
}

// =========================================
//
//	HostVersion
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_HostVersionImpl_dispose(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_HostVersion_free(&bkenv, (void*)_this);
}


JNIEXPORT jint JNICALL Java_org_berkelium_impl_HostVersionImpl_getBuild(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_HostVersion_getBuild(&bkenv, (void*)_this);
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_HostVersionImpl_getMajor(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_HostVersion_getMajor(&bkenv, (void*)_this);
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_HostVersionImpl_getMinor(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_HostVersion_getMinor(&bkenv, (void*)_this);
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_HostVersionImpl_getPatch(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_HostVersion_getPatch(&bkenv, (void*)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_HostVersionImpl_getRuntime(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_HostVersion_getRuntime(&bkenv, (void*)_this));
}

JNIEXPORT jstring JNICALL Java_org_berkelium_impl_HostVersionImpl_getVersionString(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JSTRING(env, BK_HostVersion_getVersionString(&bkenv, (void*)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_HostVersionImpl_isMinVersion(JNIEnv* env, jobject _this, jstring version)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JBOOLEAN(BK_HostVersion_isMinVersion(&bkenv, (void*)_this, JSTRING_TO_BK(env, version)));
}

// =========================================
//
//	Instance
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_InstanceImpl_dispose(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Instance_free(&bkenv, (void*)_this);
}


JNIEXPORT void JNICALL Java_org_berkelium_impl_InstanceImpl_addHostDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Instance_addHostDelegate(&bkenv, (void*)_this, (BK_HostDelegate)delegate);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_InstanceImpl_close(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Instance_close(&bkenv, (void*)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_createWindow(JNIEnv* env, jobject _this, jboolean incognito)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Instance_createWindow(&bkenv, (void*)_this, incognito));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_getExecutable(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Instance_getExecutable(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_getProfile(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Instance_getProfile(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_getRuntime(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Instance_getRuntime(&bkenv, (void*)_this));
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_InstanceImpl_getWindowCount(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_Instance_getWindowCount(&bkenv, (void*)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_getWindowList(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Instance_getWindowList(&bkenv, (void*)_this));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_InstanceImpl_removeHostDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Instance_removeHostDelegate(&bkenv, (void*)_this, (BK_HostDelegate)delegate);
}

// =========================================
//
//	Logger
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_LoggerImpl_dispose(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Logger_free(&bkenv, (void*)_this);
}


JNIEXPORT void JNICALL Java_org_berkelium_impl_LoggerImpl_debug(JNIEnv* env, jobject _this, jstring message)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Logger_debug(&bkenv, (void*)_this, JSTRING_TO_BK(env, message));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_LoggerImpl_error(JNIEnv* env, jobject _this, jstring message)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Logger_error(&bkenv, (void*)_this, JSTRING_TO_BK(env, message));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_LoggerImpl_info(JNIEnv* env, jobject _this, jstring message)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Logger_info(&bkenv, (void*)_this, JSTRING_TO_BK(env, message));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_LoggerImpl_warn(JNIEnv* env, jobject _this, jstring message)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Logger_warn(&bkenv, (void*)_this, JSTRING_TO_BK(env, message));
}

// =========================================
//
//	Profile
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_ProfileImpl_dispose(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Profile_free(&bkenv, (void*)_this);
}


JNIEXPORT jstring JNICALL Java_org_berkelium_impl_ProfileImpl_getApplicationName(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JSTRING(env, BK_Profile_getApplicationName(&bkenv, (void*)_this));
}

JNIEXPORT jstring JNICALL Java_org_berkelium_impl_ProfileImpl_getProfilePath(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JSTRING(env, BK_Profile_getProfilePath(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_ProfileImpl_getRuntime(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Profile_getRuntime(&bkenv, (void*)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isFound(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JBOOLEAN(BK_Profile_isFound(&bkenv, (void*)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isInUse(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JBOOLEAN(BK_Profile_isInUse(&bkenv, (void*)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isLocked(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JBOOLEAN(BK_Profile_isLocked(&bkenv, (void*)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isSameVersion(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JBOOLEAN(BK_Profile_isSameVersion(&bkenv, (void*)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isTooNew(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JBOOLEAN(BK_Profile_isTooNew(&bkenv, (void*)_this));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_ProfileImpl_setLocked(JNIEnv* env, jobject _this, jboolean locked)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Profile_setLocked(&bkenv, (void*)_this, locked);
}

// =========================================
//
//	Runtime
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_dispose(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Runtime_free(&bkenv, (void*)_this);
}


JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_addLogDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Runtime_addLogDelegate(&bkenv, (void*)_this, (BK_LogDelegate)delegate);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_addUpdateEvent(JNIEnv* env, jobject _this, jobject update, jint timeout)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Runtime_addUpdateEvent(&bkenv, (void*)_this, (BK_Update)update, timeout);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_createTemporaryProfile(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_createTemporaryProfile(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forExecutable(JNIEnv* env, jobject _this, jstring pathTo)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_forExecutable(&bkenv, (void*)_this, JSTRING_TO_BK(env, pathTo)));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forProfile(JNIEnv* env, jobject _this, jstring application)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_forProfile(&bkenv, (void*)_this, JSTRING_TO_BK(env, application)));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forProfilePath(JNIEnv* env, jobject _this, jstring path)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_forProfilePath(&bkenv, (void*)_this, JSTRING_TO_BK(env, path)));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forSystemInstalled(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_forSystemInstalled(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forVersion__Ljava_lang_String_2(JNIEnv* env, jobject _this, jstring version)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_forVersionS(&bkenv, (void*)_this, JSTRING_TO_BK(env, version)));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forVersion__IIII(JNIEnv* env, jobject _this, jint vMajor, jint vMinor, jint vBuild, jint vPatch)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_forVersion4I(&bkenv, (void*)_this, vMajor, vMinor, vBuild, vPatch));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_getChromeProfile(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_getChromeProfile(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_getChromiumProfile(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_getChromiumProfile(&bkenv, (void*)_this));
}

JNIEXPORT jstring JNICALL Java_org_berkelium_impl_RuntimeImpl_getDebugObjectStats(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JSTRING(env, BK_Runtime_getDebugObjectStats(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_getLogger(JNIEnv* env, jobject _this, jstring clazz, jstring name)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_getLogger(&bkenv, (void*)_this, JSTRING_TO_BK(env, clazz), JSTRING_TO_BK(env, name)));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_log(JNIEnv* env, jobject _this, jobject source, jobject type, jstring clazz, jstring name, jstring message)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Runtime_log(&bkenv, (void*)_this, LogSource_TO_BK(env, source), LogType_TO_BK(env, type), JSTRING_TO_BK(env, clazz), JSTRING_TO_BK(env, name), JSTRING_TO_BK(env, message));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_open(JNIEnv* env, jobject _this, jobject executable, jobject profile)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Runtime_open(&bkenv, (void*)_this, (BK_HostExecutable)executable, (BK_Profile)profile));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_removeLogDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Runtime_removeLogDelegate(&bkenv, (void*)_this, (BK_LogDelegate)delegate);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_removeUpdateEvent(JNIEnv* env, jobject _this, jobject update)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Runtime_removeUpdateEvent(&bkenv, (void*)_this, (BK_Update)update);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_setDefaultExecutable(JNIEnv* env, jobject _this, jstring pathTo)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Runtime_setDefaultExecutable(&bkenv, (void*)_this, JSTRING_TO_BK(env, pathTo));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_update(JNIEnv* env, jobject _this, jint timeout)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Runtime_update(&bkenv, (void*)_this, timeout);
}

// =========================================
//
//	Tab
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_dispose(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Tab_free(&bkenv, (void*)_this);
}


JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_addTabDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Tab_addTabDelegate(&bkenv, (void*)_this, (BK_TabDelegate)delegate);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_close(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Tab_close(&bkenv, (void*)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_TabImpl_getRuntime(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Tab_getRuntime(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_TabImpl_getWindow(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Tab_getWindow(&bkenv, (void*)_this));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_navigateTo(JNIEnv* env, jobject _this, jstring url)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Tab_navigateTo(&bkenv, (void*)_this, JSTRING_TO_BK(env, url));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_removeTabDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Tab_removeTabDelegate(&bkenv, (void*)_this, (BK_TabDelegate)delegate);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_resize(JNIEnv* env, jobject _this, jint width, jint height)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Tab_resize(&bkenv, (void*)_this, width, height);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_sync(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Tab_sync(&bkenv, (void*)_this);
}

// =========================================
//
//	Window
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_WindowImpl_dispose(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Window_free(&bkenv, (void*)_this);
}


JNIEXPORT jobject JNICALL Java_org_berkelium_impl_WindowImpl_createTab(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Window_createTab(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_WindowImpl_getInstance(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Window_getInstance(&bkenv, (void*)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_WindowImpl_getRuntime(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Window_getRuntime(&bkenv, (void*)_this));
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_WindowImpl_getTabCount(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_Window_getTabCount(&bkenv, (void*)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_WindowImpl_getTabList(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JOBJECT(BK_Window_getTabList(&bkenv, (void*)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_WindowImpl_isIncognito(JNIEnv* env, jobject _this)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	return BK_TO_JBOOLEAN(BK_Window_isIncognito(&bkenv, (void*)_this));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_WindowImpl_moveTo(JNIEnv* env, jobject _this, jobject tab, jint index)
{
	BK_Env bkenv;
	setupBkEnv(bkenv, env);
	BK_Window_moveTo(&bkenv, (void*)_this, (BK_Tab)tab, index);
}

